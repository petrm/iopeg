#summary A prioritized list of things to work on.
#labels Featured

== Checklist ==
  # Learn Io
  # Find/create an Io TDD framework - [http://www.iolanguage.com/scm/git/checkout/Io/docs/IoCoreReference.html#UnitTest done]
  # Create a basic parser
  # Bootstrap an IoPEG parser that generates Io code for parsing IoPEG grammars.
  # Write a grammar for Io.

=== Features to implement ===
  * Syntactically validate a string without the overhead of creating a tree of nodes.
  * Parse and generate a tree of syntax nodes for a given input.
    * Syntax nodes have access to the full parse text in the node
    * Syntax nodes have access to parent node
    * Syntax nodes have access to child nodes by index
    * Syntax nodes have access to child nodes by rule name
    * Syntax nodes have access to child nodes by label name
    * Syntax nodes are extended by methods defined in the grammar or separately
  * Rule features:
    * string literal terminals
      * double-quote delimited
      * single-quote delimited
      * escape sequences - whatever Io supports
    * PEG sequences
    * PEG alternation
    * Grouping parentheses
    * Character class terminals
    * PEG `?`, `*` and `+` quantifiers
    * PEG `&` and `!` predicates
    * Regexp terminals
    * Labeled rules, sequences, groups
    * Mark an entire rule as skipping or aggregating (as a leaf) production of a syntax node
    * Mark a rule, sequence, or group as skipping or aggregating a syntax node
    * Associate rules, sequences, or groups with inline Io code to add to the syntax node
    * Associate rules, sequences, or groups with objects defined in another file, to merge into the syntax node
    * Built in convenience terminals, like `EOF`, `CRLF`, `NEWLINE`, `NEWLINE_OR_EOF`... 